import React, { Component } from 'react'
import { GC_USER_ID } from '../constants'
import { timeDifferenceForDate } from '../utils'
import { graphql,compose } from 'react-apollo'
import gql from 'graphql-tag'
import { Switch, Route, Redirect } from 'react-router-dom'
import { withRouter } from 'react-router'
import { Link } from 'react-router-dom'

// Material UI
import {Card, CardActions, CardHeader, CardMedia, CardTitle, CardText} from 'material-ui/Card'
import Avatar from 'material-ui/Avatar';
import {
  Table,
  TableBody,
  TableHeader,
  TableHeaderColumn,
  TableRow,
  TableRowColumn,
} from 'material-ui/Table';
import FlatButton from 'material-ui/FlatButton';
import IconButton from 'material-ui/IconButton';
import Img from 'react-image';
import CircularProgress from 'material-ui/CircularProgress';
import RaisedButton from 'material-ui/RaisedButton';
import TextField from 'material-ui/TextField';
import Dialog from 'material-ui/Dialog';
import {Tabs, Tab} from 'material-ui/Tabs';
//import LinkList from './LinkList'
// copy the UI from Link or ProductPage
class Profile extends Component {
  state = {
    newName:'',
    newAbout:'',
    newEmail:'',
    newPosition:'',
    newEducation:'',

    newTwitter:'',
    newGithub:'',
    newLinkedin:'',
    newMedium:'',

    userId:'',
    showCheckboxes: false,
    selectedProducts:[],
    open:false,
  }

  handleOpen = () => {
    this.setState({open: true});
  };

  handleClose = () => {
    this.setState({open: false});
  };

  isSelected = (id) => {
    console.log("is selected")
    console.log(id)
    return this.state.selectedProducts.indexOf(id) !== -1;
    //return this.state.selectedProducts.push(id);
  };

  handleRowSelection = (selectedRows) => {
    console.log('selected rows')
    console.log(selectedRows)
    this.setState({

      selectedProducts: selectedRows,
    });
  };

  render() {
    // get ID from url params
    const userId = this.props.match.params.id
    //const userId = localStorage.getItem(GC_USER_ID)
    console.log(userId)

    if(this.props.findUserQuery && this.props.findUserQuery.loading){
      return <div><CircularProgress size={90} thickness={7}/></div>
    }


    if(this.props.findUserQuery && this.props.findUserQuery.error){
      console.log(this.props.allUsersQuery.error)
      return <div>Error</div>
    }

    //const user ={}
    //all users then traverse till you find specific user
    const result = this.props.allFindUserQuery.FindUserQuery
    console.log(result)
    const len = result.length
    console.log("len")
    console.log(len)
    for (var i = 0; i < len; i++) {
     if(result[i].id===userId)
    {
      console.log("hey")
      console.log(result[i])
      this.user = result[i]
     }
    }



    console.log("found")
    console.log(this.user)
    var canSelect=false
    if(localStorage.getItem(GC_USER_ID)===this.user.id){
              console.log("if")
              console.log(userId)
              console.log(this.user.id)
              canSelect= true
    }
    console.log(canSelect)
    console.log("update email and name")
    {this.user.links.map((link,id)=>
          (
            console.log(id)
          )
        )
    }
    const actions = [
        <FlatButton
          label="Cancel"
          primary={false}
          onClick={this.handleClose}
        />,
        <FlatButton
          label="Submit"
          primary={true}
          onClick={() => this._updateUser()}
        />,
      ]
      return (
        <div>
        <div>
        <Tabs>
          <Tab label='Profile'>
          <div >
            <Card>
              <CardHeader
                title={this.user.name}
                subtitle={this.user.position}
                avatar={<Avatar src="http://www.gotknowhow.com/media/avatars/images/default/large-user-avatar.png" />}
              />
              <CardTitle title="About" />
              <CardText>
                <div>{this.user.about}</div>
                <br/>
                <div> Email : {this.user.email} </div>
                <div>Education : {this.user.education}</div>
                <div> No.Of Products Submitted : {this.user.links.length||"N/A"} </div>
                <div> No. Of Offers Created : {this.user.offers.length||"N/A"} </div>
                <RaisedButton primary={true} label="Edit Profile" onClick={this.handleOpen} />

                <Dialog
                  title="Edit Submision"
                  actions={actions}
                  modal={false}
                  open={this.state.open}
                  autoScrollBodyContent={true}
                >

                <TextField
                  floatingLabelText="Name"
                  defaultValue={this.user.name}
                  fullWidth={true}
                  onChange={(e) => this.setState({ newName: e.target.value })}
                />

                <TextField
                  floatingLabelText="Email"
                  defaultValue={this.user.email}
                  fullWidth={true}
                  onChange={(e) => this.setState({ newEmail: e.target.value })}
                />

                <TextField
                  floatingLabelText="Job Description or Position"
                  defaultValue={this.user.position}
                  fullWidth={true}
                  onChange={(e) => this.setState({ newPosition: e.target.value })}
                />

                <TextField
                  floatingLabelText="About"
                  multiLine={true}
                  rows={2}
                  rowsMax={4}
                  defaultValue={this.user.about}
                  onChange={(e) => this.setState({ newAbout: e.target.value })}
                />

                <TextField
                  floatingLabelText="Education"
                  fullWidth={true}
                  defaultValue={this.user.education}
                  onChange={(e) => this.setState({ newEducation: e.target.value })}
                />

                </Dialog>
              </CardText>
              <CardActions>
                <label> Follow On: </label>
                <a href="https://www.graph.cool/docs/reference/graphql-api/mutation-api-ol0yuoz6go/#updating-a-node"><FlatButton label="LinkedIn"> </FlatButton></a>
                <a> <FlatButton label="Medium" /> </a>
                <a> <FlatButton label="Twitter" /> </a>
                <a> <FlatButton label="Github" /> </a>
              </CardActions>
            </Card>
          </div>
          </Tab>

          <Tab label = 'Submissions'>
          <div>
            <strong> Submissions: </strong>
            <Table selectable={canSelect} displaySelectAll={canSelect} multiSelectable={canSelect} onRowSelection={this.handleRowSelection}>
              <TableHeader adjustForCheckbox={canSelect} >
                <TableRow>
                <TableHeaderColumn>Index</TableHeaderColumn>
                  <TableHeaderColumn>ID</TableHeaderColumn>
                  <TableHeaderColumn>Title</TableHeaderColumn>
                  <TableHeaderColumn>Category</TableHeaderColumn>

                  <TableHeaderColumn>Date Created</TableHeaderColumn>
                  <TableHeaderColumn>Last Updated</TableHeaderColumn>
                  <TableHeaderColumn>No. Of Votes</TableHeaderColumn>
                  <TableHeaderColumn>No. Of Offers</TableHeaderColumn>
                </TableRow>
              </TableHeader>
              <TableBody >
                {this.user.links.map((link,id)=>
                  (
                    <TableRow key={link.id} selected={this.isSelected(id)}>
                      <TableRowColumn> {id+1}</TableRowColumn>
                      <TableRowColumn> <Link to={'/product/'+link.id} > {link.id}</Link></TableRowColumn>
                      <TableRowColumn> {link.title}</TableRowColumn>
                      <TableRowColumn> {link.category || 'NA'}</TableRowColumn>
                      <TableRowColumn> {link.createdAt}</TableRowColumn>
                      <TableRowColumn> {link.updatedAt}</TableRowColumn>
                      <TableRowColumn> {link.votes.length || "0"}</TableRowColumn>
                      <TableRowColumn> {link.offers.length || "0"}</TableRowColumn>23
                    </TableRow>
                  ) || 'N/A'
                )
                }
              </TableBody>
            </Table>

          </div>
          </Tab>
        </Tabs>
        </div>
        </div>
      )
  }

  _updateUser = async () => {
  console.log('update user')

  const userId = this.user.id
  const {newName,newEmail,newAbout,newEducation } = this.state
  console.log("vars")
  console.log(userId)
  console.log(newName)
  console.log(newEmail)
  console.log(newAbout)
  console.log(newEducation)
  await this.props.updateUserMutation({
    variables: {
      userId,
      newName,
      newEmail,
      newAbout,
      newEducation
    }
  }

  )
  this.setState({open: false,})
  }

}

// why wont findUseQuery(ID) wont work
const FIND_USER_QUERY = gql`
  query FindUserQuery($userId: ID) {
    User(id: $userId) {
      id
      name
      email
      createdAt
      links{
        id
        title
        offers{
          id
          amount
          comments{
            id
            content
          }
        }
        votes{
          id
        }
      }

    }
  }
`

const UPDATE_USER_MUTATION = gql`
mutation updateUserMutation ($userId:ID! , $newName:String! , $newEmail:String! ,$newAbout:String! , $newEducation:String!){
    updateUser(id: $userId , name:$newName , email:$newEmail , about:$newAbout,education:$newEducation) {
      id
      name
      email
      about
      education
      updatedAt
      createdAt
      links{
        id
        title
        offers{
          id
          amount
          comments{
            id
            content
          }
        }
        votes{
          id
        }
      }

    }
  }
`


const UPDATE_LINK_QUERY = gql`
mutation UpdateLinkQuery($id:ID! $newTitle:String! $newDescription:String! $newUrl:String!){
  updateLink(
    id:$id
    title: $newTitle
    description:$newDescription
    url: $newUrl
  ){
    id
    title
    description
    url
    category
    createdAt
    updatedAt
    postedBy{
      id
      name
    }
    votes{
      id
    }
    offers{
      id
    }
    tags{
      id
    }
  }
}
`

const ALL_USERS_QUERY = gql`
  query AllUsersQuery{
    allUsers {
      id
      name
      email
      createdAt
      updatedAt
      about
      education
      position
      github
      twitter
      offers{
        id
        amount
      }
      links{
        id
        title
        url
        description
        createdAt
        updatedAt
        votes{
          id
        }
        offers{
          id
          amount
          comments{
            id
            content
          }
        }

      }
    }
  }
`
//how to make single queries work
//export default graphql(USER_QUERY,{name:'findUserQuery'}) (Profile)

export default compose(
  graphql(ALL_USERS_QUERY, {name:'allUsersQuery'}),
  graphql(FIND_USER_QUERY, { name: 'findUserQuery', options: (props) =>({variables:{userId: this.props.match.id}})
      }),
  graphql(UPDATE_USER_MUTATION, { name: 'updateUserMutation' })
)(Profile)


//Ref
//https://dev-blog.apollodata.com/tutorial-graphql-input-types-and-client-caching-f11fa0421cfd
//https://reactjs.org/docs/react-component.html
//https://www.graph.cool/docs/reference/graphql-api/mutation-api-ol0yuoz6go#updating-a-node


//componentWillMount
// componentWillMount(){
//   const userId = localStorage.getItem(GC_USER_ID)
//   console.log('userId')
//   console.log(userId)
//
//   if (this.props.allUsersQuery && this.props.allUsersQuery.loading) {
//   return  console.log("loading")
//   }
//
//   if (this.props.allUsersQuery && this.props.allUsersQuery.error) {
//     console.log(this.props.allUsersQuery.error)
//     return console.log("error")
//   }
//
//   const result = this.props.allUsersQuery.allUsers
//   console.log(result)
//   const len = result.length
//   console.log(len)
//   for (var i = 0; i < len; i++) {
//    if(result[i].id===userId)
//   {
//     console.log(result[i])
//     var user = result[i]
//    }
//   }
// console.log("found")
// console.log(user)
// this.setState({newName: user.name})
// this.setState({newEmail: user.email})
// console.log("END MOUNT")
// }
Profi
